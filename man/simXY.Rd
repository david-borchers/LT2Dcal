% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2DLTfunctions mixture.r
\name{simXY}
\alias{simXY}
\title{#F.x=function(x,b,hr,ystart,pi.x,logphi,w) return((1-px(x,b,hr,ystart))*pi.x(x,logphi,w))}
\usage{
simXY(
  N,
  pi.x,
  logphi,
  hr,
  b,
  w,
  ystart,
  xSampL = 5 * N,
  discardNotSeen = TRUE,
  ...
)
}
\arguments{
\item{N}{animal population}

\item{pi.x}{function describing the perpendicular distance density distribution}

\item{logphi}{parameters for pi.x (some maybe logged)}

\item{hr}{function describing the hazard rate}

\item{b}{hazard rate parameter vector}

\item{w}{truncation distance}

\item{ystart}{max forward distance at which could possibly detect animal (see details).}

\item{xSampL}{length of x-dimension vector to sample perpendicular distances from.}

\item{discardNotSeen}{boolean; discard individuals not detected.  See details}

\item{...}{arguments to be passed into \code{\link{simnhPP}}}
}
\value{
list of \code{$locs} x and y coordinates for simulated sightings and
\code{$settings} simulation settings.
}
\description{
Simulates sightings from a known population given a density distribution
and hazard rate.  This function has been replaced by \code{\link{sim.n}}.
}
\details{
#'@title Negative log-likelihood for forward distance and perpendicular distance
#'
#'@description Calculates the negative log-likelihood for forward distance, \code{y}, and
#'perpendicular distance, \code{x}, for a given hazard and perpendicular density distribution.
#'
#'@param y scalar or vector; forward distance observations
#'@param x scale or vector; perp. distance observations
#'@param pars c(b,logphi); hazard rate and density log-parameters in a vector (see details).
#'@param hr hazard rate function
#'@param ystart max forward distance at which could possibly detect animal (see details).
#'@param pi.x perpendicular distance density distribution
#'@param w perpendicular truncation distance.
#'@param length.b length of the hazard rate parameter vector
#'@return negative log likelihood for forward distance, \code{y} and perpendicular distance \code{x}.
#'@details
#'Must to ensure the hazard function has decayed to (very close to) zero by \code{ystart}.
#'The parameter vector, \code{pars}, must be passed in with two parameters for the hazard rate first,
#'then two parameters for perpendicular density gradient \eqn{\pi(x)} i.e. \code{c(b,logphi)}.
#'@examples
#'ystart=4;w=1
#'hr=h2; b=log(c(0.75,1))
#'pi.x=pi.norm; logphi=c(0.5,log(0.2))
#'N=50 #true number of animals
#'#generate some observations
#'simDat=simXY(N=N,pi.x=pi.x,logphi=logphi,
#'hr=hr,b=b,w=w,ystart=ystart)
#'x=simDat$locs$x; y=simDat$locs$y
#'pars=c(b,logphi)
#'negloglik.yx(y,x,pars,hr,ystart,pi.x,w)
#'@seealso \code{\link{simXY}}
#'@export
negloglik.yx=function(pars,y,x,hr,ystart,pi.x,w,rmin,length.b=2,debug=FALSE,DENOM)
{
  if(length(y)!=length(x)) stop("Lengths of x and y must be the same.")
  if(debug) print(pars)
  if (!class(hr)=='character'){stop('message from negloglik: hr must
                                    be passed as a character')}
  if (!class(pi.x)=='character'){stop('message from negloglik: pi.x must
                                    be passed as a character')}

  # determine which values are rounded or not:
  x.rounded = x[sqrt(y**2 + x**2)<rmin]
  y.rounded = y[sqrt(y**2 + x**2)<rmin]
  new.x = x[sqrt(y**2 + x**2)>=rmin]
  new.y = y[sqrt(y**2 + x**2)>=rmin]
  x = new.x ; y = new.y # avoids writing over vars as we reassign
  rounded = length(x.rounded)

  if (length(x)!=length(y)){stop('X + Y')} # Safety check to make sure
  # rounding didn't make a mistake with data dimensions

  n=length(y) ; hrname = hr ; piname = pi.x
  # unpack parameters *** need to change if hr and pi.x don't have 2 pars each
  b=pars[1:length.b]
  if(piname=="pi.const") logphi=NULL else logphi=pars[(1+length.b):length(pars)]

  hr=match.fun(hr) ; pi.x=match.fun(pi.x)
  llik=rep(NA,n)
  # calculate numerator:
  num=sum(log(fyx(y,x,b,hrname,ystart)) + log(pi.x(x,logphi,w)))
  # calculate denominator:
  int=integrate(f=p.pi.x,lower=0,upper=w,b=b,hr=hrname,
                ystart=ystart,pi.x=piname,logphi=logphi,w=w)
  denom=log(int$value)

  # likelihood:
  llik=-(num-n*denom) # 2016 paper likelihood, for the un-rounded data points

  if(rounded>0){
    negllik.rounded = round.lik(rounded,pi.x=piname,
      logphi,rmin,ymax=ystart,hr=hrname,b,w,DENOM=DENOM)
  } # we calculate the rounded data points part of the likelihood

  else{negllik.rounded=0} # No addition to normal likelihood needed


  return(llik + negllik.rounded) #round.lik returns a neg.log.lik, so we add.
}
Simulate sightings given a known perpendicular density distribution and hazard function

if \code{discardNotSeen=FALSE} individuals that are not detected are
assigned y-dimension distances = -999, otherwise \code{discardNotSeen=TRUE}
invididuals are removed and not returned
}
\examples{
ystart=4;w=1
hr=h2; b=log(c(0.75,1))
pi.x=pi.norm; logphi=c(0.5,log(0.2))
N=50 #true number of animals
#generate some observations
simDat=simXY(N=N,pi.x=pi.x,logphi=logphi,
hr=hr,b=b,w=w,ystart=ystart)
x=simDat$locs$x; y=simDat$locs$y

}
